import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'core/app_router.dart';
import 'dart:io';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'firebase_options.dart'; // this is generated by flutterfire configure
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import './widgets/main_scaffold.dart';

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

final GlobalKey<MainScaffoldState> mainScaffoldKey = GlobalKey<MainScaffoldState>();

class MyHttpOverrides extends HttpOverrides {
  @override
  HttpClient createHttpClient(SecurityContext? context) {
    return super.createHttpClient(context)
      ..badCertificateCallback = (X509Certificate cert, String host, int port) => true;
  }
}

Future<void> _setupFirebaseMessaging() async {
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  // For iOS
  await messaging.requestPermission(
    alert: true,
    badge: true,
    sound: true,
  );

  // For Android 13+ (optional prompt for exact alarms if needed)
  await messaging.setAutoInitEnabled(true);

  // Background messages handler
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // Foreground messages handler
  FirebaseMessaging.onMessage.listen((RemoteMessage message) async {
    print("üì≤ Foreground message received: ${message.notification?.title}  ${mainScaffoldKey.currentState}");
    // Delay a bit in case scaffold is initializing
    await Future.delayed(const Duration(milliseconds: 300));

    if (mainScaffoldKey.currentState != null) {
      print("üì≤ Refreshing credit from notification");
      await mainScaffoldKey.currentState!.refreshCredit();
    } else {
      print("‚ùå mainScaffoldKey.currentState is still null");
    }
    if (message.notification != null) {
      flutterLocalNotificationsPlugin.show(
        message.hashCode,
        message.notification!.title,
        message.notification!.body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'high_importance_channel',
            'High Importance Notifications',
            importance: Importance.max,
            priority: Priority.high,
            playSound: true,
          ),
        ),
      );
    }
  });

}

// Must be a top-level function
@pragma('vm:entry-point')
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  print("üîî Background message received: ${message.notification?.title}");
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Request notification permissions
  await _setupFirebaseMessaging();

  // Local notifications setup
  const AndroidInitializationSettings initializationSettingsAndroid =
  AndroidInitializationSettings('@mipmap/ic_launcher');

  const InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
  );

  await flutterLocalNotificationsPlugin.initialize(initializationSettings);

  HttpOverrides.global = MyHttpOverrides();
  runApp(const MyApp());
}


class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static final Color primaryOrange = Color(0xFFFF9800);

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      routerConfig: AppRouter.router,
      title: 'My Orange App',
      theme: ThemeData(
        primaryColor: primaryOrange,
        scaffoldBackgroundColor: Colors.white,
        colorScheme: ColorScheme.fromSeed(
          seedColor: primaryOrange,
          brightness: Brightness.light,
        ).copyWith(
          primary: primaryOrange,
          secondary: primaryOrange,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.white,
          foregroundColor: primaryOrange,
          elevation: 1,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: primaryOrange,
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
      ),
    );
  }
}
